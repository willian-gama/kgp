name: pull_request_ci

on:
  pull_request:
    branches: [ "develop" ]
  push:

# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token
permissions:
  contents: write # Allows to commit files

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  GPR_USERNAME: ${{ secrets.GPR_USERNAME }}
  GPR_KEY: ${{ secrets.GPR_KEY }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GIT_BRANCH: ${{ github.event.pull_request.head.ref }}
  GIT_OWNER: ${{ github.repository_owner }}
  GIT_REPO: ${{ github.event.repository.name }}

jobs:
  auto_bump:
    runs-on: ubuntu-latest
    steps:
      - name: checkout project sources
        uses: actions/checkout@v4
        with:
          # Allow to access files in the Pull Request
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Bump version if needed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for pushing changes
        run: |
          FILE="build.gradle.kts"
          
          get_version_number() {
            local content="$1"
            if [[ "$content" =~ version\ *=\ *\"([0-9]+\.[0-9]+\.[0-9]+)\" ]]; then
              echo "${BASH_REMATCH[1]}"
            else
              echo "failed to find the line with the version number"
            fi
          }
          
          compare_versions() {
            local local_version=$1
            local remote_version=$2
          
            IFS="." read -r local_major local_minor local_patch <<<"$local_version"
            IFS="." read -r remote_major remote_minor remote_patch <<<"$remote_version"
          
            # compare major versions
            if [ "$remote_major" -gt "$local_major" ]; then
              echo "local major version is lower than remote version"
              return 0
            elif [ "$remote_major" -lt "$local_major" ]; then
              echo "local version: $local_version is greater than remote version: $remote_version"
              return 1
            fi
          
            # compare minor versions
            if [ "$remote_minor" -gt "$local_minor" ]; then
              echo "local minor version is lower than remote version"
              return 0
            elif [ "$remote_minor" -lt "$local_minor" ]; then
              echo "local version: $local_version is greater than remote version: $remote_version"
              return 1
            fi
          
            # compare patch versions
            if [ "$remote_patch" -ge "$local_patch" ]; then
              echo "remote patch version is greater than or equal to local version"
              return 0
            else
              echo "local version: $local_version is greater than remote version: $remote_version"
              return 1
            fi
          }
          
          bump_and_push_new_version_to_git() {
            local_version=$1
            remote_version=$2
          
            IFS='.' read -r major minor patch <<< "$remote_version"
            new_local_version="$major.$minor.$((patch + 1))"
            perl -i -pe "s/$local_version/$new_local_version/" "$FILE"
          
            commit_message="auto bump version from $local_version to $new_local_version"
            echo "$commit_message"
          
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
          
            git add "$FILE"
            git commit -m "$commit_message"
            git push
          
            exit 0
          }
          
          bump_version_if_needed() {
            local_version=$(get_version_number "$(cat "$FILE")")
            echo "local version: $local_version"
          
            git fetch origin
            remote_version=$(get_version_number "$(git show origin/develop:"$FILE")")
            echo "remote version: $remote_version"
          
            if compare_versions "$local_version" "$remote_version" == 0; then
              bump_and_push_new_version_to_git "$local_version" "$remote_version"
            fi
          }
          
          bump_version_if_needed

  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: checkout project sources
        uses: actions/checkout@v4

      - name: set up jdk
        uses: actions/setup-java@v4
        with:
          distribution: zulu # Supported distributions: https://github.com/actions/setup-java#supported-distributions
          java-version: 21

      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      # https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: setup gradle
        uses: gradle/actions/setup-gradle@v4

      - name: include local.properties from secret variables
        run: scripts/include_local_properties.sh

      - name: run tests
        run: ./gradlew test
